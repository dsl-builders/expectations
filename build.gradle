/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2024 Vladimir Orany.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.java-project'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
    id 'org.kordamp.gradle.coveralls'
    id 'io.github.gradle-nexus.publish-plugin'
}

if (!project.hasProperty('ossrhUsername'))      ext.ossrhUsername       = System.getenv('SONATYPE_USERNAME') ?: '**UNDEFINED**'
if (!project.hasProperty('ossrhPassword'))      ext.ossrhPassword       = System.getenv('SONATYPE_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingKeyId'))       ext.signingKeyId        = System.getenv('SIGNING_KEY_ID') ?: '**UNDEFINED**'
if (!project.hasProperty('signingPassword'))    ext.signingPassword     = System.getenv('SIGNING_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingSecretKey'))   ext.signingSecretKey    = System.getenv('SIGNING_SECRET_KEY_PATH') ? rootProject.file(System.getenv('SIGNING_SECRET_KEY_PATH')).text : '**UNDEFINED**'

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name        = 'Expectations DSL Builder'
        vendor      = 'Vladimir Orany'
        description = 'DSL for Writing JUnit Parametrized Tests'

        links {
            website      = "https://github.com/${slug}"
            issueTracker = "https://github.com/${slug}/issues"
            scm          = "https://github.com/${slug}.git"
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = "${project.rootProject.buildDir}/repos/local/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "${project.rootProject.buildDir}/repos/local/snapshot"
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        enabled = false
        signing {
            enabled = signingSecretKey != '**UNDEFINED**'
            keyId = signingKeyId
            secretKey = signingSecretKey
            password = signingPassword
        }
        releasesRepository = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }

    quality {
        checkstyle {
            toolVersion = '8.27'
        }

        codenarc {
            toolVersion = '1.5'
        }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
            aggregate {
                enabled = false
            }
        }
        groovydoc {
            enabled = false
            aggregate {
                enabled = false
            }
        }
        sourceHtml {
            enabled = false
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
    }
}

subprojects { subproject ->
    if (subproject.name == 'guide') return

    apply plugin: 'java-library'

    config {
        publishing {
            enabled = true
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        manifest.attributes provider: 'gradle'
    }
}
